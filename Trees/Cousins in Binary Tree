//https://leetcode.com/problems/cousins-in-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public bool IsCousins(TreeNode root, int x, int y) {
        if(root==null||root.val==x||root.val==y)
            return false;
        var q=new Queue<TreeNode>();
        q.Enqueue(root);
        int parent=0;
        bool foundx=false;
        bool foundy=false;
        while(q.Count>0)
        {
            int size=q.Count;
            while(size>0)
            {
                var cur=q.Dequeue();
                if(cur.left!=null)
                {
                    if(cur.left.val==x||cur.left.val==y)
                    {
                        if(parent==root.val)
                            return false;
                        if(parent==cur.val)
                            return false;
                        if(parent==0)
                            parent=cur.val;
                        if(parent!=cur.val)
                            return true;
                        foundx=cur.left.val==x;
                        foundy=cur.left.val==y;
                    }
                    else
                        q.Enqueue(cur.left);
                }
                if(cur.right!=null)
                {
                    if(cur.right.val==x||cur.right.val==y)
                    {
                        if(parent==root.val)
                            return false;
                        if(parent==cur.val)
                            return false;
                        if(parent==0)
                            parent=cur.val;
                        if(parent!=cur.val)
                            return true;
                        foundx=cur.right.val==x;
                        foundy=cur.right.val==y;                        
                    }
                    else
                        q.Enqueue(cur.right);
                }
                size--;
            }
            if(foundx||foundy)
                return false;
            parent=0;
        }
        if(foundx&&foundy)
            return true;
        else
            return false;
        
    }
}
